package de.CypDasHuhn.extendedPatterns.database

import de.CypDasHuhn.extendedPatterns.datapackName
import de.cypdashuhn.rooster.core.Rooster
import org.bukkit.Bukkit
import org.bukkit.Material
import java.io.File

object DatapackManager {
    fun getDatapackPath(worldName: String): File {
        return Rooster.plugin.dataFolder
            .resolve("..") // Navigate up to "plugins"
            .resolve("..") // Navigate up to the server root directory
            .resolve(worldName) // Navigate into the world folder
            .resolve("datapacks") // Go into the datapacks folder
            .resolve("CustomBlockTags") // Access the specific datapack folder
            .canonicalFile // Resolves the actual path to handle any symbolic links, "..", etc.
    }

    fun modifyDatapackGlobal(action: (File) -> Unit) {
        val worlds = Bukkit.getWorlds().map { it.name }

        worlds.forEach { world ->
            val datapackPath = getDatapackPath(world)
            action(datapackPath)
        }
    }

    fun modifyDatapack(worldName: String, action: (File) -> Unit) {
        val datapackPath = getDatapackPath(worldName)
        action(datapackPath)
    }

    fun initializeDatapacks() {
        modifyDatapackGlobal { it ->
            val tagsDirectory = it.resolve("data/$datapackName/tags")
            val blocksDirectory = tagsDirectory.resolve("block")

            blocksDirectory.mkdirs()

            val packMeta = it.resolve("pack.mcmeta")
            if (packMeta.createNewFile()) {
                packMeta.writeText(
                    """
                    {
                        "pack": {
                            "pack_format": 48,
                            "description": "Custom Block Tags! This datapack is generated by the CustomBlockTags plugin."
                        }
                    }
                    """.trimIndent()
                )
            }
        }
    }

    fun Material.mcTag(): String = "\"minecraft:${this.name.lowercase()}\""

    fun List<Material>.toDatapackDats(): String {
        val valuesList = this.map { it.mcTag() } // Map each material to its Minecraft tag
        return """{"values": $valuesList}""".trimIndent() // Return formatted JSON string
    }

    fun createOrOverrideDatapackEntry(groupName: String, worldName: String, materialList: List<Material>) {
        val datapackPath = getDatapackPath(worldName)
        val tagsDirectory = datapackPath.resolve("data/$datapackName/tags")
        val blocksDirectory = tagsDirectory.resolve("block")

        val blockFile = blocksDirectory.resolve("$groupName.json")
        if (!blockFile.exists()) {
            blockFile.createNewFile()
        }
        blockFile.writeText(materialList.toDatapackDats())
    }

    fun deleteDatapackEntry(groupName: String, worldName: String) {
        val datapackPath = getDatapackPath(worldName)
        val tagsDirectory = datapackPath.resolve("data/$datapackName/tags")
        val blocksDirectory = tagsDirectory.resolve("block")
        val itemsDirectory = tagsDirectory.resolve("item")

        val blockFile = blocksDirectory.resolve("$groupName.json")
        blockFile.delete()

        val itemFile = itemsDirectory.resolve("$groupName.json")
        itemFile.delete()
    }
}